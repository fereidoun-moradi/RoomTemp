target Cpp {fast: false, threads: 1};    
import Monitor.lf;          
reactor Controller {      
    input getSense:int;         
    output activate_h:int;        
    output activate_c:int;                      
    output switchoff:int;            
    state desiredValue:int(21); 
    state heating:bool(false);                                       
    state cooling:bool(false);

    //injection cases [1,2,...,5], zero means no injection
    state injection_caseId:int(5);      
     
    reaction(getSense) -> activate_c, activate_h, switchoff {=
        if(*getSense.get() == 22 && heating == false && cooling == false && injection_caseId == 1) {
			activate_h.set(1); //heat
			heating = true;
			std::cout << "The INJECTED command is 'activate_h'" << "\n";
        } else if(*getSense.get() == 21 && heating == false && cooling == true && injection_caseId == 2) {
			activate_h.set(1); //heat 
			heating = true;
			std::cout << "The INJECTED command is 'activate_h'" << "\n";
        } else if(*getSense.get() == 20 && heating == false && cooling == false && injection_caseId == 3) {
			activate_c.set(-1); //cool
			cooling = true;
			std::cout << "The INJECTED command is 'activate_c'" << "\n";
        } else if(*getSense.get() == 20 && heating == false && cooling == true && injection_caseId == 4) {
			switchoff.set(0); //off
			heating = false; cooling = false;
			std::cout << "The INJECTED command is 'switchoff'" << "\n";
        } else if(*getSense.get() == 21 && heating == true && cooling == false && injection_caseId == 5) {
			activate_h.set(1); //heat
			heating = true;
			std::cout << "The INJECTED command is 'activate_h'" << "\n";
        } else {
        
        if(*getSense.get() == desiredValue){
            if(heating == true || cooling == true){ 
                switchoff.set(0);
                heating = false; cooling = false;                           
                std::cout << "The command 'switchoff' is transmitted."<< "\n";  
            }
        } else if(*getSense.get() > desiredValue)   
          {activate_c.set(-1); //cool
           cooling = true;
           std::cout << "The command 'activate_c' is transmitted."<< "\n";  
        } else if(*getSense.get() < desiredValue) 
          {activate_h.set(1); //heat
          heating = true;
          std::cout << "The command 'activate_h' is transmitted."<< "\n";
        }
        
      }
    =}	
}              
reactor Room {
    output sensedValue:int; 
    //output comp_sensedValue:int;
    input cooling:int;
    input heating:int;
    input status:int; 
    input comp_status:int; 
    state temperature:int(22);
    state cold_air_blowing:int(0); 
    reaction(status) -> sensedValue {=       
        if (temperature == 21) { 
          cold_air_blowing = rand() % 2;
          temperature = temperature - cold_air_blowing;
          sensedValue.set(temperature);
        } else sensedValue.set(temperature);
       	auto elapsed_time = get_elapsed_logical_time();
		auto elapsed_secs = std::chrono::duration_cast<std::chrono::seconds>(elapsed_time);
		std::cout << "................(Current logical time is: " << elapsed_secs << ")................" << std::endl;
        std::cout << "cold_air_blowing:" << cold_air_blowing << "\n";
    =}
    reaction(comp_status) -> sensedValue {=       
        sensedValue.set(temperature); 
    =}
    reaction(heating) {= temperature = temperature + 1; =}
    reaction(cooling) {= temperature = temperature - 1; =}
}
reactor Sensor {    
    output sense:int;    
    output out:int;      
    input sensedValue:int;   
    timer start(0, 1 sec);
    //injection cases [1,2,...,6], zero means no injection
    state injection_caseId:int(0); 
    state tempSensedValue:int(21);
    
    reaction(start) -> sense{= sense.set(1); =}	
    reaction(sensedValue) -> out {=
        
        if(tempSensedValue == 21 && *sensedValue.get() == 22 && injection_caseId == 1) {
			out.set(20);
			std::cout << "The INJECTED 'sensedValue' is:" << 20 << "\n";
			tempSensedValue = *sensedValue.get();
        } else if(tempSensedValue == 22 && *sensedValue.get() == 20 && injection_caseId == 2) {
			out.set(21);
			std::cout << "The INJECTED 'sensedValue' is:" << 21 << "\n";
			tempSensedValue = *sensedValue.get();
        } else if(tempSensedValue == 22 && *sensedValue.get() == 21 && injection_caseId == 3) {
			out.set(20);
			std::cout << "The INJECTED 'sensedValue' is:" << 20 << "\n";
			tempSensedValue = *sensedValue.get();
        } else if(tempSensedValue == 20 && *sensedValue.get() == 20 && injection_caseId == 4) {
			out.set(21);
			std::cout << "The INJECTED 'sensedValue' is:" << 21 << "\n";
			tempSensedValue = *sensedValue.get();
        } else if(tempSensedValue == 21 && *sensedValue.get() == 21 && injection_caseId == 5) {
			out.set(20);
			std::cout << "The INJECTED 'sensedValue' is:" << 20 << "\n";
			tempSensedValue = *sensedValue.get();
        } else if(tempSensedValue == 21 && *sensedValue.get() == 20 && injection_caseId == 6) {
			out.set(21);
			std::cout << "The INJECTED 'sensedValue' is:" << 21 << "\n";
			tempSensedValue = *sensedValue.get();
        } else {
            out.set(*sensedValue.get());
            std::cout << "The 'sensedValue' is:" << *sensedValue.get() << "\n";
            tempSensedValue = *sensedValue.get(); 
        }
        
    =}   
}   
 
reactor Complementary_Sensor {        
    output sense:int;    
    output out:int; 
    input sensedValue:int;   
    timer start(0, 1 sec);
    reaction(start) -> sense{= sense.set(1); =}	 
    reaction(sensedValue) -> out {=
        out.set(sensedValue.get());
        std::cout << "The complementary 'sensedValue' is:" << *sensedValue.get() << "\n"; 
    =}
}  

 

reactor HC_Unit { 
    input activate_h:int;
    input activate_c:int;   
    input switchoff:int;
    output heating:int;
    output cooling:int;
    reaction(activate_h) -> heating {= 
        heating.set(1);
     =}
    reaction(activate_c) -> cooling {= 
        cooling.set(1);
     =}
    reaction(switchoff) {= 
     =}
}

main reactor RoomTemp {    
	room = new Room();
	sensor = new Sensor(); 
	comp_sensor = new Complementary_Sensor();
	unit = new HC_Unit(); 
	controller = new Controller();
	monitor = new Monitoring();
	room.sensedValue -> sensor.sensedValue;
	room.sensedValue -> comp_sensor.sensedValue;
	sensor.sense -> room.status after 1 sec;
	comp_sensor.out -> monitor.comp_getSense;
	comp_sensor.sense -> room.comp_status after 1 sec;
	sensor.out -> controller.getSense;
	sensor.out -> monitor.getSense;
	
	unit.heating -> room.heating;
	unit.cooling -> room.cooling;  
	//controller.activate_h -> unit.activate_h;
	//controller.activate_c -> unit.activate_c;
	//controller.switchoff -> unit.switchoff;
	
	controller.activate_h -> monitor.activate_h;
	controller.activate_c -> monitor.activate_c;
	controller.switchoff -> monitor.switchoff;
	monitor.out_activate_h -> unit.activate_h;
	monitor.out_activate_c -> unit.activate_c;
	monitor.out_switchoff-> unit.switchoff;
	
	
	
}