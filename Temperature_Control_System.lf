target Cpp {fast: false, threads: 1};   
//import Monitor.lf;   
reactor Controller { 
    input getSense:int;  
    output activate_h:int;
    output activate_c:int; 
    output switchoff:int;
    state desiredValue:int(21); 
    state heating:bool(false);
    state cooling:bool(false);
    reaction(getSense) -> activate_c, activate_h, switchoff {=
        if(*getSense.get() == desiredValue){
            if(heating == true || cooling == true){
                switchoff.set(0);
                heating = false; cooling = false; 
                std::cout << "The 'switchoff' command is transmitted."<< "\n";  
            }
        } else if(*getSense.get() > desiredValue)   
          {activate_c.set(-1); //cool
           cooling = true;
           std::cout << "The 'activate_c' command is transmitted."<< "\n";
        } else if(*getSense.get() < desiredValue) 
          {activate_h.set(1); //heat 
          heating = true;
          std::cout << "The 'activate_h' command is transmitted."<< "\n";
        }
    =}	
}
reactor Room {
    output sensedValue:int;
    input cooling:int;
    input heating:int;
    input status:int; 
    state temperature:int(22);
    state cold_air_blowing:int(0);
    reaction(status) -> sensedValue {=     
        if (temperature == 21) { 
          cold_air_blowing = rand() % 2;
          temperature = temperature - cold_air_blowing;
          sensedValue.set(temperature);
        } else sensedValue.set(temperature);
       	auto elapsed_time = get_elapsed_logical_time();
		auto elapsed_secs = std::chrono::duration_cast<std::chrono::seconds>(elapsed_time);
		std::cout << "................(Current logical time is: " << elapsed_secs << ")................" << std::endl;
        std::cout << "cold_air_blowing:" << cold_air_blowing << "\n";
    =}
    reaction(heating) {= temperature = temperature + 1; =}
    reaction(cooling) {= temperature = temperature - 1; =}
}
reactor Sensor { 
    output sense:int;
    output out:int;
    input sensedValue:int;
    timer start(0, 1 sec);
    reaction(start) -> sense{= sense.set(1); =}	
    reaction(sensedValue) -> out {=
        out.set(sensedValue.get());
        std::cout << "The 'sensedValue' is:" << *sensedValue.get() << "\n"; 
    =}
}
reactor HC_Unit {
    input activate_h:int;
    input activate_c:int;
    input switchoff:int;
    output heating:int;
    output cooling:int;
    reaction(activate_h) -> heating {= 
        heating.set(1);
        //std::cout << "heater_on"<< "\n";
     =}
    reaction(activate_c) -> cooling {= 
        cooling.set(1);
        //std::cout << "cooler_on"<< "\n";
     =}
    reaction(switchoff) {= 
        //std::cout << "The UC_Unit is SWITCHED OFF"<< "\n";
     =}
}
main reactor RoomTemp {  
	room = new Room();
	sensor = new Sensor(); 
	unit = new HC_Unit();
	controller = new Controller();
	//monitor = new Monitoring_Mitigation();
	room.sensedValue -> sensor.sensedValue;
	sensor.sense -> room.status after 1 sec;
	sensor.out -> controller.getSense;
	unit.heating -> room.heating;
	unit.cooling -> room.cooling;  
	controller.activate_h -> unit.activate_h;
	controller.activate_c -> unit.activate_c;
	controller.switchoff -> unit.switchoff;
	//controller.activate_h -> monitor.activate_h;
	//controller.activate_c -> monitor.activate_c;
	//monitor.cmdHeat -> unit.activate_h;
	//monitor.cmdCool -> unit.activate_c;
	//sensor.out -> monitor.sensedData;
	
	
}